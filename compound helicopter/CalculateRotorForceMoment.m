% W为在过渡桨毂-气流坐标系SW
% 最终得到 MR1Force，MR2Force，MR1Moment，MR2Moment：向量形式
% X_MR1，Y_MR1，Z_MR1，L_MR1，M_MR1，N_MR1：标量形式
% X_MR2，Y_MR2，Z_MR2，L_MR2，M_MR2，N_MR2：标量形式

Chi_1 = atan(-mu_1/lambda_1);
Chi_2 = atan(-mu_2/lambda_2);

K_1 = 15*pi/32*tan(Chi_1/2);
K_2 = 15*pi/32*tan(Chi_2/2);

%拉力
T_W1 = N_b/4*rho*a*c*Omega^2*R^3*((theta_0-theta_diff)*(2/3+mu_1^2-epsilon*mu_1^2) + theta_t*(1/2-2/3*epsilon ...
        +1/2*(1-epsilon)^2*mu_1^2) - B_1*mu_1*(1-epsilon^2) + lambda_1*(1-epsilon^2) + a_11*epsilon*mu_1*(1-epsilon)...
        + mu_1/(2*Omega)*p_S1*(1-epsilon^2) + a_dot_01/Omega*(-2/3+epsilon) + b_dot_11*mu_1/(2*Omega)*(1-epsilon)^2)... 
        - N_b*(a_ddot_01*M_beta+m_b*g-m_b*(w_dot-u*q+p*v));
T_W2 = N_b/4*rho*a*c*Omega^2*R^3*((theta_0+theta_diff)*(2/3+mu_2^2-epsilon*mu_2^2) + theta_t*(1/2-2/3*epsilon ...
        +1/2*(1-epsilon)^2*mu_2^2) - B_2*mu_2*(1-epsilon^2) + lambda_2*(1-epsilon^2) + a_12*epsilon*mu_2*(1-epsilon)...
        + mu_2/(2*Omega)*p_S2*(1-epsilon^2) + a_dot_02/Omega*(-2/3+epsilon) + b_dot_12*mu_2/(2*Omega)*(1-epsilon)^2)... 
        - N_b*(a_ddot_02*M_beta+m_b*g-m_b*(w_dot-u*q+p*v));
%侧向力
Y_W1 = N_b/4*rho*a*c*Omega^2*R^3*((theta_0-theta_diff)*(b_11*(2/3-1/2*epsilon+mu_1^2-epsilon*mu_1^2)-3/2*a_01*mu_1*(1-epsilon^2)+1/(3*Omega)*q_S1) ...
        + theta_t*(1/2*b_11*(1+mu_1^2)*(1-epsilon)^2-a_01*mu_1*(1-3/2*epsilon)+1/Omega*q_S1*(1/4-1/3*epsilon)) ...
        - A_1*((1/2*lambda_1+1/(8*Omega)*p_S1*mu_1)*(1-epsilon^2)+a_11*mu_1*(1/2+1/4*epsilon-3/4*epsilon^2)) ...
        + B_1*(a_01*(1/3+mu_1^2-epsilon*mu_1^2)-b_11*mu_1*(1-1/4*epsilon-3/4*epsilon^2)-1/(8*Omega)*mu_1*q_S1*(1-epsilon^2)) ...
        + a_01*(a_11*(1/3-1/2*epsilon-2*mu_1^2+2*epsilon*mu_1^2)-1/(3*Omega)*p_S1) ...
        + a_11*(1/2*b_11*mu_1*(1-epsilon)+7/(8*Omega)*q_S1*mu_1*(1-epsilon^2)) + b_11*(5/8*mu_1*p_S1*(1-epsilon^2)) ...
        + lambda_1*(b_11*(3/2-2*epsilon+1/2*epsilon^2)-3*a_01*mu_1*(1-epsilon)+1/Omega*q_S1*(1-epsilon^2)) ...
        + (K_1*v_1+K_2*v_2*delta_l)/(Omega*R)*((theta_0-theta_diff)*(-1/3+1/2*epsilon)+theta_t*(-1/4+2/3*epsilon-1/2*epsilon^2)-(lambda_1+7/8*a_11*mu_1-1/8*B_1*mu_1)*(1-epsilon)^2) ... 
        + 2*a_dot_01*a_dot_11/Omega^2*(-1/3+epsilon-epsilon^2) + a_dot_01/Omega*(A_1*(1/3-1/2*epsilon))...
        + a_dot_11/Omega*((theta_0-theta_diff)*(1/3-1/2*epsilon)+theta_t*(1/4-2/3*epsilon+1/2*epsilon^2)-1/8*B_1*mu_1*(1-epsilon)^2) ...
        - b_dot_11/(8*Omega)*(A_1*mu_1*(1-epsilon)^2) + 1/Omega*(lambda_1*a_dot_11*(1-epsilon)^2) + 2*a_dot_01/(3*Omega)*(K_1*v_1+K_2*v_2*delta_l)/(Omega*R)*(1-epsilon)^3 ...
        + 2*b_11*a_dot_01/Omega*(-1/3+epsilon-epsilon^2) ...
        + 1/(4*Omega)*mu_1*(4*a_01*a_dot_01+3*a_11*a_dot_11+b_11*b_dot_11)*(1-epsilon)^2 ...
        + 2*a_dot_01/Omega^2*q_S1*(-1/3+1/2*epsilon) + 1/Omega*(b_11*a_dot_01 +a_01*b_dot_11)*(-1/3+1/2*epsilon) ...
        + 1/(8*Omega)*mu_1*(4*a_01*a_dot_01 + a_11*a_dot_11 +3*b_11*b_dot_11)*(1-epsilon)^2);
Y_W2 = N_b/4*rho*a*c*Omega^2*R^3*((theta_0+theta_diff)*(b_12*(2/3-1/2*epsilon+mu_2^2-epsilon*mu_2^2)-3/2*a_02*mu_2*(1-epsilon^2)+1/(3*Omega)*q_S2) ...
        + theta_t*(1/2*b_12*(1+mu_2^2)*(1-epsilon)^2-a_02*mu_2*(1-3/2*epsilon)+1/Omega*q_S2*(1/4-1/3*epsilon)) ...
        - A_2*((1/2*lambda_2+1/(8*Omega)*p_S2*mu_2)*(1-epsilon^2)+a_12*mu_2*(1/2+1/4*epsilon-3/4*epsilon^2)) ...
        + B_2*(a_02*(1/3+mu_2^2-epsilon*mu_2^2)-b_12*mu_2*(1-1/4*epsilon-3/4*epsilon^2)-1/(8*Omega)*mu_2*q_S2*(1-epsilon^2)) ...
        + a_02*(a_12*(1/3-1/2*epsilon-2*mu_2^2+2*epsilon*mu_2^2)-1/(3*Omega)*p_S2) ...
        + a_12*(1/2*b_12*mu_2*(1-epsilon)+7/(8*Omega)*q_S2*mu_2*(1-epsilon^2)) + b_12*(5/8*mu_2*p_S2*(1-epsilon^2)) ...
        + lambda_2*(b_12*(3/2-2*epsilon+1/2*epsilon^2)-3*a_02*mu_2*(1-epsilon)+1/Omega*q_S2*(1-epsilon^2)) ...
        + (K_2*v_2+K_1*v_1*delta_u)/(Omega*R)*((theta_0+theta_diff)*(-1/3+1/2*epsilon)+theta_t*(-1/4+2/3*epsilon-1/2*epsilon^2)-(lambda_2+7/8*a_12*mu_2-1/8*B_2*mu_2)*(1-epsilon)^2) ... 
        + 2*a_dot_02*a_dot_12/Omega^2*(-1/3+epsilon-epsilon^2) + a_dot_02/Omega*(A_2*(1/3-1/2*epsilon))...
        + a_dot_12/Omega*((theta_0+theta_diff)*(1/3-1/2*epsilon)+theta_t*(1/4-2/3*epsilon+1/2*epsilon^2)-1/8*B_2*mu_2*(1-epsilon)^2) ...
        - b_dot_12/(8*Omega)*(A_2*mu_2*(1-epsilon)^2) + 1/Omega*(lambda_2*a_dot_12*(1-epsilon)^2) + 2*a_dot_02/(3*Omega)*(K_2*v_2+K_1*v_1*delta_u)/(Omega*R)*(1-epsilon)^3 ...
        + 2*b_12*a_dot_02/Omega*(-1/3+epsilon-epsilon^2) ...
        + 1/(4*Omega)*mu_2*(4*a_02*a_dot_02+3*a_12*a_dot_12+b_12*b_dot_12)*(1-epsilon)^2 ...
        + 2*a_dot_02/Omega^2*q_S2*(-1/3+1/2*epsilon) + 1/Omega*(b_12*a_dot_02 +a_02*b_dot_12)*(-1/3+1/2*epsilon) ...
        + 1/(8*Omega)*mu_2*(4*a_02*a_dot_02 + a_12*a_dot_12 +3*b_12*b_dot_12)*(1-epsilon)^2);
%前向力
H_W1 = N_b/4*rho*a*c*Omega^2*R^3*((theta_0-theta_diff)*(a_11*(2/3-1/2*epsilon)-lambda_1*mu_1*(1-epsilon)-1/(3*Omega)*p_S1) ...
        + theta_t*(1/2*(a_11-lambda_1*mu_1)*(1-epsilon)^2-1/Omega*p_S1*(1/4-1/3*epsilon)) ...
        + A_1*(1/3*a_01-1/4*b_11*epsilon*mu_1*(1-epsilon)+1/(8*Omega)*q_S1*mu_1*(1-epsilon^2)) ...
        + B_1*(1/2*lambda_1*(1-epsilon^2)-1/4*a_11*mu_1*(2-3*epsilon+epsilon^2)+3/(8*Omega)*p_S1*mu_1*(1-epsilon^2)) ...
        - a_01*(b_11*(1/3-1/2*epsilon)-1/2*a_01*mu_1*(1-epsilon^2)+1/(3*Omega)*p_S1) ...
        + a_11*(1/4*a_11*mu_1*(2-epsilon+epsilon^2)-1/(8*Omega)*p_S1*mu_1*(1-epsilon^2)) ...
        + b_11*(1/4*b_11*epsilon*mu_1*(1-epsilon)-1/(8*Omega)*q_S1*mu_1*(1-epsilon^2)) ...
        + lambda_1*(a_11*(3/2-2*epsilon+1/2*epsilon^2)-1/Omega*p_S1*mu_1*(1-epsilon^2)) + c_d/a*mu_1*(1-epsilon^2) ...
        + (K_1*v_1+K_2*v_2*delta_l)/(Omega*R)*(a_01*(1/3-1/2*epsilon)-1/8*mu_1*(1-epsilon)^2*(A_1-B_1)) + 2*a_dot_01*b_dot_11/Omega^2*(1/3-epsilon+epsilon^2) ...
        + a_dot_11/(8*Omega)*A_1*mu_1*(1-epsilon)^2 + a_dot_01/Omega*(B_1*(-1/3+1/2*epsilon)+(theta_0-theta_diff)*mu_1/2*(1-epsilon)^2+theta_t*mu_1/3*(1-3*epsilon+3*epsilon^2)) ...
        + b_dot_11/Omega*(3/8*B_1*mu_1*(1-epsilon)^2+(theta_0-theta_diff)*(-1/3+1/2*epsilon)+theta_t*(-1/4+2/3*epsilon-1/2*epsilon^2)) ...
        + 1/Omega*((a_11*a_dot_01+a_01*a_dot_11)*(-1/3+1/2*epsilon)-1/8*mu_1*(a_11*b_dot_11+b_11*a_dot_11)*(1-epsilon)^2) ...
        + 1/Omega*(2*a_11*a_dot_01*(-1/3+epsilon-epsilon^2)-lambda_1*b_dot_11*(1-epsilon)^2+2*a_dot_01/Omega*p_S1*(1/3-1/2*epsilon)));
H_W2 = N_b/4*rho*a*c*Omega^2*R^3*((theta_0+theta_diff)*(a_12*(2/3-1/2*epsilon)-lambda_2*mu_2*(1-epsilon)-1/(3*Omega)*p_S2) ...
        + theta_t*(1/2*(a_12-lambda_2*mu_2)*(1-epsilon)^2-1/Omega*p_S2*(1/4-1/3*epsilon)) ...
        + A_2*(1/3*a_02-1/4*b_12*epsilon*mu_2*(1-epsilon)+1/(8*Omega)*q_S2*mu_2*(1-epsilon^2)) ...
        + B_2*(1/2*lambda_2*(1-epsilon^2)-1/4*a_12*mu_2*(2-3*epsilon+epsilon^2)+3/(8*Omega)*p_S2*mu_2*(1-epsilon^2)) ...
        - a_02*(b_12*(1/3-1/2*epsilon)-1/2*a_02*mu_2*(1-epsilon^2)+1/(3*Omega)*p_S2) ...
        + a_12*(1/4*a_12*mu_2*(2-epsilon+epsilon^2)-1/(8*Omega)*p_S2*mu_2*(1-epsilon^2)) ...
        + b_12*(1/4*b_12*epsilon*mu_2*(1-epsilon)-1/(8*Omega)*q_S2*mu_2*(1-epsilon^2)) ...
        + lambda_2*(a_12*(3/2-2*epsilon+1/2*epsilon^2)-1/Omega*p_S2*mu_2*(1-epsilon^2)) + c_d/a*mu_2*(1-epsilon^2) ...
        + (K_2*v_2+K_1*v_1*delta_u)/(Omega*R)*(a_02*(1/3-1/2*epsilon)-1/8*mu_2*(1-epsilon)^2*(A_2-B_2)) + 2*a_dot_02*b_dot_12/Omega^2*(1/3-epsilon+epsilon^2) ...
        + a_dot_12/(8*Omega)*A_2*mu_2*(1-epsilon)^2 + a_dot_02/Omega*(B_2*(-1/3+1/2*epsilon)+(theta_0+theta_diff)*mu_2/2*(1-epsilon)^2+theta_t*mu_2/3*(1-3*epsilon+3*epsilon^2)) ...
        + b_dot_12/Omega*(3/8*B_2*mu_2*(1-epsilon)^2+(theta_0+theta_diff)*(-1/3+1/2*epsilon)+theta_t*(-1/4+2/3*epsilon-1/2*epsilon^2)) ...
        + 1/Omega*((a_12*a_dot_02+a_02*a_dot_12)*(-1/3+1/2*epsilon)-1/8*mu_2*(a_12*b_dot_12+b_12*a_dot_12)*(1-epsilon)^2) ...
        + 1/Omega*(2*a_12*a_dot_02*(-1/3+epsilon-epsilon^2)-lambda_2*b_dot_12*(1-epsilon)^2+2*a_dot_02/Omega*p_S2*(1/3-1/2*epsilon)));
%俯仰力矩
M_W1 = N_b/4*rho*a*c*Omega^2*R^4*epsilon*(A_1*(1/3+1/4*mu_1^2*(1-epsilon)) + 1/2*a_01*mu_1*(1-epsilon^2) ...
        - 1/4*b_11*mu_1^2*(1-epsilon) - 1/(3*Omega)*q_S1 + ((K_1*v_1+K_2*v_2*delta_l)/(Omega*R)-b_11)*(1/3-1/2*epsilon) ...
        - a_dot_11/Omega*(1/3-1/2*epsilon)) ...
        + N_b/2*a_11*M_beta*epsilon*R*Omega^2;
M_W2 = N_b/4*rho*a*c*Omega^2*R^4*epsilon*(A_2*(1/3+1/4*mu_2^2*(1-epsilon)) + 1/2*a_02*mu_2*(1-epsilon^2) ...
        - 1/4*b_12*mu_2^2*(1-epsilon) - 1/(3*Omega)*q_S2 + ((K_2*v_2+K_1*v_1*delta_u)/(Omega*R)-b_12)*(1/3-1/2*epsilon) ...
        - a_dot_12/Omega*(1/3-1/2*epsilon)) ...
        + N_b/2*a_12*M_beta*epsilon*R*Omega^2;
%滚转力矩
L_W1 = N_b/4*rho*a*c*Omega^2*R^4*epsilon*((theta_0-theta_diff)*mu_1*(1-epsilon^2) + theta_t*mu_1*(2/3-epsilon) - B_1*(1/3+3/4*mu_1^2*(1-epsilon)) + lambda_1*mu_1*(1-epsilon) ...
        - a_11*(1/3-1/2*epsilon) + 1/4*a_11*mu_1^2*(1-epsilon) + 1/(3*Omega)*p_S1 - a_dot_01*mu_1/(2*Omega)*(1-epsilon)^2 + b_dot_11/Omega*(1/3-1/2*epsilon)) ...
        - N_b/2*b_11*M_beta*epsilon*R*Omega^2;
L_W2 = N_b/4*rho*a*c*Omega^2*R^4*epsilon*((theta_0+theta_diff)*mu_2*(1-epsilon^2) + theta_t*mu_2*(2/3-epsilon) - B_2*(1/3+3/4*mu_2^2*(1-epsilon)) + lambda_2*mu_2*(1-epsilon) ...
        - a_12*(1/3-1/2*epsilon) + 1/4*a_12*mu_2^2*(1-epsilon) + 1/(3*Omega)*p_S2 - a_dot_02*mu_2/(2*Omega)*(1-epsilon)^2 + b_dot_12/Omega*(1/3-1/2*epsilon)) ...
        - N_b/2*b_12*M_beta*epsilon*R*Omega^2;
%偏航力矩
N_W1 = N_b/4*rho*a*c*Omega^2*R^4*((theta_0-theta_diff)*(2/3*lambda_1+1/2*a_11*mu_1*epsilon+1/(3*Omega)*p_S1*mu_1) ...
        + theta_t*(lambda_1*(1/2-2/3*epsilon)+a_11*mu_1*epsilon*(1/3-1/2*epsilon)+1/Omega*p_S1*mu_1*(1/4-1/3*epsilon)) ...
        + A_1*(b_11*(-1/4+1/3*epsilon-1/8*mu_1^2+1/8*epsilon^2*mu_1^2)+1/3*a_01*mu_1-1/(4*Omega)*q_S1) ...
        + B_1*(a_11*(1/4-1/3*epsilon-1/8*mu_1^2+1/8*epsilon^2*mu_1^2)-1/2*lambda_1*mu_1*(1-epsilon^2)-1/(4*Omega)*p_S1) ...
        + a_01*(b_11*mu_1*(-2/3+epsilon)+1/2*a_01*mu_1^2*(1-epsilon^2)-2/(3*Omega)*q_S1*mu_1) ...
        + a_11*(a_11*(1/4-2/3*epsilon+1/2*epsilon^2+3/8*mu_1^2-3/8*epsilon^2*mu_1^2)-1/Omega*p_S1*(1/2-2/3*epsilon)) ...
        + b_11*(b_11*(1/4-2/3*epsilon+1/2*epsilon^2+1/8*mu_1^2-1/8*epsilon^2*mu_1^2)+1/Omega*q_S1*(1/2-2/3*epsilon)) ...
        + lambda_1*(lambda_1+a_11*mu_1)*(1-epsilon^2) - 1/(2*a)*c_d*(1+mu_1^2-epsilon^2*mu_1^2) + 1/(4*Omega^2)*(p_S1^2+q_S1^2) ...
        + (K_1*v_1+K_2*v_2*delta_l)/(Omega*R)*(A_1*(1/4-1/3*epsilon)-b_11*(1/2-4/3*epsilon+epsilon^2)+a_01*mu_1*(2/3-epsilon)-1/Omega*q_S1*(1/2-2/3*epsilon)) ...
        + ((K_1*v_1+K_2*v_2*delta_l)/(Omega*R))^2*(1/4-2/3*epsilon+1/2*epsilon^2)+1/Omega^2*(2*a_dot_01^2+a_dot_11^2+b_dot_11^2)*(1/4-2/3*epsilon+1/2*epsilon^2) ...
        + a_dot_01/Omega*((theta_0-theta_diff)*(-1/2+2/3*epsilon)+theta_t*(-2/5+epsilon-2/3*epsilon^2)+B_1*mu_1*(1/3-1/2*epsilon)) ...
        + a_dot_11/Omega*A_1*(-1/4+1/3*epsilon) - 2/(3*Omega)*lambda_1*a_dot_01*(2-3*epsilon) ...
        + b_dot_11/Omega*((theta_0-theta_diff)*mu_1*(1/3-1/2*epsilon)+theta_t*mu_1*(1/4-2/3*epsilon+1/2*epsilon^2)+B_1*(-1/4+1/3*epsilon)) ...
        + 2*a_dot_11/Omega*(K_1*v_1+K_2*v_2*delta_l)/(Omega*R)*(-1/4+2/3*epsilon-1/2*epsilon^2) ...
        + 2/Omega*(b_11*a_dot_11-a_11*b_dot_11)*(1/4-2/3*epsilon+1/2*epsilon^2)+2/Omega*mu_1*(a_01*a_dot_11+a_11*a_dot_01)*(-1/3+1/2*epsilon) ...
        + 2/Omega^2*(b_dot_11*p_S1+a_dot_11*q_S1)*(1/4-1/3*epsilon));
N_W2 = N_b/4*rho*a*c*Omega^2*R^4*((theta_0+theta_diff)*(2/3*lambda_2+1/2*a_12*mu_2*epsilon+1/(3*Omega)*p_S2*mu_2) ...
        + theta_t*(lambda_2*(1/2-2/3*epsilon)+a_12*mu_2*epsilon*(1/3-1/2*epsilon)+1/Omega*p_S2*mu_2*(1/4-1/3*epsilon)) ...
        + A_2*(b_12*(-1/4+1/3*epsilon-1/8*mu_2^2+1/8*epsilon^2*mu_2^2)+1/3*a_02*mu_2-1/(4*Omega)*q_S2) ...
        + B_2*(a_12*(1/4-1/3*epsilon-1/8*mu_2^2+1/8*epsilon^2*mu_2^2)-1/2*lambda_2*mu_2*(1-epsilon^2)-1/(4*Omega)*p_S2) ...
        + a_02*(b_12*mu_2*(-2/3+epsilon)+1/2*a_02*mu_2^2*(1-epsilon^2)-2/(3*Omega)*q_S2*mu_2) ...
        + a_12*(a_12*(1/4-2/3*epsilon+1/2*epsilon^2+3/8*mu_2^2-3/8*epsilon^2*mu_2^2)-1/Omega*p_S2*(1/2-2/3*epsilon)) ...
        + b_12*(b_12*(1/4-2/3*epsilon+1/2*epsilon^2+1/8*mu_2^2-1/8*epsilon^2*mu_2^2)+1/Omega*q_S2*(1/2-2/3*epsilon)) ...
        + lambda_2*(lambda_2+a_12*mu_2)*(1-epsilon^2) - 1/(2*a)*c_d*(1+mu_2^2-epsilon^2*mu_2^2) + 1/(4*Omega^2)*(p_S2^2+q_S2^2) ...
        + (K_2*v_2+K_1*v_1*delta_u)/(Omega*R)*(A_2*(1/4-1/3*epsilon)-b_12*(1/2-4/3*epsilon+epsilon^2)+a_02*mu_2*(2/3-epsilon)-1/Omega*q_S2*(1/2-2/3*epsilon)) ...
        + ((K_2*v_2+K_1*v_1*delta_u)/(Omega*R))^2*(1/4-2/3*epsilon+1/2*epsilon^2)+1/Omega^2*(2*a_dot_02^2+a_dot_12^2+b_dot_12^2)*(1/4-2/3*epsilon+1/2*epsilon^2) ...
        + a_dot_02/Omega*((theta_0+theta_diff)*(-1/2+2/3*epsilon)+theta_t*(-2/5+epsilon-2/3*epsilon^2)+B_2*mu_2*(1/3-1/2*epsilon)) ...
        + a_dot_12/Omega*A_2*(-1/4+1/3*epsilon) - 2/(3*Omega)*lambda_2*a_dot_02*(2-3*epsilon) ...
        + b_dot_12/Omega*((theta_0+theta_diff)*mu_2*(1/3-1/2*epsilon)+theta_t*mu_2*(1/4-2/3*epsilon+1/2*epsilon^2)+B_2*(-1/4+1/3*epsilon)) ...
        + 2*a_dot_12/Omega*(K_2*v_2+K_1*v_1*delta_u)/(Omega*R)*(-1/4+2/3*epsilon-1/2*epsilon^2) ...
        + 2/Omega*(b_12*a_dot_12-a_12*b_dot_12)*(1/4-2/3*epsilon+1/2*epsilon^2)+2/Omega*mu_2*(a_02*a_dot_12+a_12*a_dot_02)*(-1/3+1/2*epsilon) ...
        + 2/Omega^2*(b_dot_12*p_S2+a_dot_12*q_S2)*(1/4-1/3*epsilon));

% S1过渡气流坐标系
X_S1 = -H_W1;
Y_S1 = Y_W1;
Z_S1 = -T_W1;
L_S1 = -L_W1;
M_S1 = M_W1;
N_S1 = -N_W1;

MR1Force = L_H1B1'*L_S1H1'*[X_S1;Y_S1;Z_S1];
X_MR1 = MR1Force(1);
Y_MR1 = MR1Force(2);
Z_MR1 = MR1Force(3);

MR1Moment = L_H1B1'*L_S1H1'*[L_S1;M_S1;N_S1] + [y_H1*Z_MR1-z_H1*Y_MR1 ; z_H1*X_MR1-x_H1*Z_MR1 ; x_H1*Y_MR1-y_H1*X_MR1];
L_MR1 = MR1Moment(1);
M_MR1 = MR1Moment(2);
N_MR1 = MR1Moment(3);

% S1左手旋翼气流坐标系
X_S2 = -H_W2;
Y_S2 = Y_W2;
Z_S2 = -T_W2;
L_S2 = -L_W2;
M_S2 = M_W2;
N_S2 = -N_W2;

MR2Force_left_hand = L_H2B2'*L_S2H2'*[X_S2;Y_S2;Z_S2];
X_MR2_left_hand = MR2Force_left_hand(1);
Y_MR2_left_hand = MR2Force_left_hand(2);
Z_MR2_left_hand = MR2Force_left_hand(3);

MR2Moment_left_hand = L_H2B2'*L_S2H2'*[L_S2;M_S2;N_S2] + [y_H2*Z_MR2_left_hand-z_H2*Y_MR2_left_hand ; z_H2*X_MR2_left_hand-x_H2*Z_MR2_left_hand ; x_H2*Y_MR2_left_hand-y_H2*X_MR2_left_hand];
L_MR2_left_hand = MR2Moment_left_hand(1);
M_MR2_left_hand = MR2Moment_left_hand(2);
N_MR2_left_hand = MR2Moment_left_hand(3);

X_MR2 = X_MR2_left_hand;
Y_MR2 = -Y_MR2_left_hand;
Z_MR2 = Z_MR2_left_hand;
MR2Force = [X_MR2;Y_MR2;Z_MR2];
L_MR2 = -L_MR2_left_hand;
M_MR2 = M_MR2_left_hand;
N_MR2 = -N_MR2_left_hand;
MR2Moment = [L_MR2;M_MR2;N_MR2];
